operators = import 'std/operators.blg';
internal = import 'std/internal/inheritance.blg';
functools = import 'std/functools.blg';

bind = createSymbol 2;
properties = internal.properties;
object = internal.object;

mixin = def args do
	combined = none;
	while not is_none args do
		props = properties (head args);
		
		while not is_none props do
			combined = (head props) :: combined;
		
			props = tail props;
		end
		
		args = tail args;
	end
	
	return object combined;
end;

method = def func do
	return {
		operators.call: func,
		bind: def self do
			f = def args do
				return functools.call func (getCell self :: args);
			end;
			return functools.varargs f;
		end
	};
end;

class = def obj do
	constructor = def args do
		self = createCell none;
	
		oldProps = properties obj;
		newProps = none;
		
		while not is_none oldProps do
			key = get (head oldProps) 0;
			value = get (head oldProps) 1;
			
			if responds_to value bind then
				value = bind value self;
			end
			
			newProps = (key, value) :: newProps;
			oldProps = tail oldProps;
		end
		
		created = object newProps;
		setCell self created;
		return created;
	end;
	
	return mixin [
		obj,
		{
			operators.call: functools.varargs constructor
		}
	];
end;